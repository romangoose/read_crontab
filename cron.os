// Any copyright is dedicated to the Public Domain.
// https://creativecommons.org/publicdomain/zero/1.0/
// ===================== OR =========================
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Функция - Получить детальное расписание для записи Крон
//  Основная пользовательская функция для работы с крон-подобным расписанием.
//  Возвращает массив конкретных дат (с точностью до минуты), соответствующих расписанию
//  - в пределах заданного периода
//  количество получаемых записей может быть ограничено 
// (например, для проверки того, ДОЛЖНО ли было наступить событие в заданном интервале
// достаточно запросить 1 запись и проверить размер возвращенного массива)
//
// Параметры:
//  стрЗапись            - Строка - Полная Запись расписания в крон-подобном формате
//  вхНачалоИнтервала    - Дата -
//  вхКонецИнтервала     - Дата - 
//  КоличествоПервые - Число - Количество первых элементов детального расписания. 0 (по умолчанию) - все без ограничений
// 
// Возвращаемое значение:
//   - Массив (ДатаВремя)
//
Функция ПолучитьДетальноеРасписаниеДляЗаписиКрон(стрЗапись, вхНачалоИнтервала, вхКонецИнтервала, КоличествоПервые = Неопределено) Экспорт
    вхНачалоИнтервала = ?(ТипЗнч(вхНачалоИнтервала) = Тип("Дата"), вхНачалоИнтервала, ТекущаяДата());
    вхКонецИнтервала  = ?(ТипЗнч(вхКонецИнтервала)  = Тип("Дата"), вхКонецИнтервала,  ТекущаяДата());

    мЭлементыЗаписи = ПреобразоватьЗаписьКронВМассивСтруктур(стрЗапись, Год(вхНачалоИнтервала), Год(вхКонецИнтервала));

    мДаты = Новый Массив;
    Для Каждого тЭлементЗаписи Из мЭлементыЗаписи Цикл
        мТекДаты = ПолучитьДетальноеРасписаниеДляСтруктурыЭлементаЗаписиКрон(тЭлементЗаписи, вхНачалоИнтервала, вхКонецИнтервала, КоличествоПервые);

        Для Каждого тДата Из мТекДаты Цикл
            Если КоличествоПервые <> 0 
                И мДаты.Количество() >= КоличествоПервые Тогда
                Прервать;
            КонецЕсли;
            
            //добавляем без проверки уникальности (очень накладно)
            мДаты.Добавить(тДата);
        КонецЦикла;
    КонецЦикла;

    спс = Новый СписокЗначений;
    спс.ЗагрузитьЗначения(мДаты);
    спс.СортироватьПоЗначению(НаправлениеСортировки.Возр);

    мДаты.Очистить();

    тДата = Неопределено;
    Для Каждого тЭл Из спс Цикл
        Если тДата = тЭл.Значение Тогда
            Продолжить;
        КонецЕсли;
        тДата = тЭл.Значение;
        мДаты.Добавить(тДата);
    КонецЦикла;

    Возврат(мДаты);
КонецФункции

// основной техническая функция построения детального расписания
// ожидает структурное описание отдельного элемента крон-записи
// возвращает массив дат, соответствующих этому одному элементу
Функция ПолучитьДетальноеРасписаниеДляСтруктурыЭлементаЗаписиКрон(струЭлементЗаписи, вхНачалоИнтервала, вхКонецИнтервала, КоличествоДат = Неопределено)

    мДаты = Новый Массив;

    струВходящаяДата = Новый Структура(
                                "НачалоИнтервалаГод
                                |,КонецИнтервалаГод
                                |,НачалоИнтервалаМесяц
                                |,КонецИнтервалаМесяц
                                |,НачалоИнтервалаДень
                                |,КонецИнтервалаДень
                                |,НачалоИнтервалаЧас
                                |,КонецИнтервалаЧас
                                |,НачалоИнтервалаМинута
                                |,КонецИнтервалаМинута
                                |"
                                    ,Год(вхНачалоИнтервала)
                                    ,Год(вхКонецИнтервала) 
                                    ,НачалоМесяца(вхНачалоИнтервала)
                                    ,НачалоМесяца(вхКонецИнтервала)
                                    ,НачалоДня(вхНачалоИнтервала)
                                    ,НачалоДня(вхКонецИнтервала)
                                    ,НачалоЧаса(вхНачалоИнтервала)
                                    ,НачалоЧаса(вхКонецИнтервала)
                                    ,НачалоМинуты(вхНачалоИнтервала)
                                    ,НачалоМинуты(вхКонецИнтервала)
                            );

    КоличествоДат = ?(ТипЗнч(КоличествоДат)=Тип("Число"), КоличествоДат, 0);
    Для Каждого тГод Из струЭлементЗаписи.Год Цикл
        Если НЕ (
                    тГод   >= струВходящаяДата.НачалоИнтервалаГод
                    И тГод <= струВходящаяДата.КонецИнтервалаГод
                    ) Тогда
            Продолжить;
        КонецЕсли;

        //мДаты.Добавить(тГод); //отладка

        Для Каждого тМесяц Из струЭлементЗаписи.Месяц Цикл
            ДатаМесяц = Дата(тГод, тМесяц,1);
            Если НЕ (
                        ДатаМесяц   >= струВходящаяДата.НачалоИнтервалаМесяц
                        И ДатаМесяц <= струВходящаяДата.КонецИнтервалаМесяц
                        ) Тогда
                Продолжить;
            КонецЕсли;

            МаксДеньМесяца = День(КонецМесяца(ДатаМесяц));

            //мДаты.Добавить(ДатаМесяц); //отладка

            Для Каждого тДень Из струЭлементЗаписи.ДеньМесяца Цикл
                Если тДень > МаксДеньМесяца Тогда
                    Продолжить;
                КонецЕсли;
                ДатаДень = Дата(тГод, тМесяц,тДень);
                Если НЕ (
                        ДатаДень   >= струВходящаяДата.НачалоИнтервалаДень
                        И ДатаДень <= струВходящаяДата.КонецИнтервалаДень
                        ) Тогда
                    Продолжить;
                КонецЕсли;

                Если струЭлементЗаписи.ДеньНедели.Найти(ДеньНедели(ДатаДень)) = Неопределено Тогда
                    Продолжить;
                КонецЕсли;

                //мДаты.Добавить(ДатаДень); //отладка

                Для Каждого тЧас Из струЭлементЗаписи.Час Цикл
                    ДатаЧас = Дата(тГод, тМесяц,тДень, тЧас, 0, 0);
                    Если НЕ (
                            ДатаЧас   >= струВходящаяДата.НачалоИнтервалаЧас
                            И ДатаЧас <= струВходящаяДата.КонецИнтервалаЧас
                            ) Тогда
                        Продолжить;
                    КонецЕсли;

                    //мДаты.Добавить(ДатаЧас); //отладка

                    Для Каждого тМинута Из струЭлементЗаписи.Минута Цикл
                        ДатаМинута = Дата(тГод, тМесяц,тДень, тЧас, тМинута, 0);
                        Если НЕ (
                                ДатаМинута   >= струВходящаяДата.НачалоИнтервалаМинута
                                И ДатаМинута <= струВходящаяДата.КонецИнтервалаМинута
                                ) Тогда
                            Продолжить;
                        КонецЕсли;

                        мДаты.Добавить(ДатаМинута);

                        Если КоличествоДат <> 0
                            И мДаты.Количество() >= КоличествоДат Тогда
                            Возврат(мДаты);
                        КонецЕсли;
                    КонецЦикла; //Минута
                КонецЦикла; //Час
            КонецЦикла; //День (месяца и недели)
        КонецЦикла; //Месяц
    КонецЦикла; //Год

    Возврат(мДаты);
КонецФункции


// преобразует текстовую крон-запись (элемент;элемент;...;элемент) в массив структурированнх значений,
// (далее условия, налагаемые этими отдельные элементы должны восприниматься как обрабатываемые по принципу ИЛИ)
Функция ПреобразоватьЗаписьКронВМассивСтруктур(стрЗапись, чМинГод=Неопределено, чМаксГод=Неопределено)
    
    симвРазделитель = ";";
    
    Значение = СокрЛП(стрЗапись);
    
    мЭлементов = СтрРазделить(Значение, симвРазделитель, ЛОЖЬ);
    
    мСтруктур = Новый Массив;
    
    Для Каждого тЭл Из мЭлементов Цикл
        мСтруктур.Добавить(ПреобразоватьЭлементЗаписиКронВСтруктуру(тЭл, чМинГод, чМаксГод));
    КонецЦикла;

    Возврат(мСтруктур);
КонецФункции

// Отдельный элемент крон-записи (Минута Час ДеньМесяца Месяц ДеньНедели Год)
// преобразауется в структуру, в которой перечислены (массив чисел) все допустимые значения для каждой отдельной части даты
// (далее условия, налагаемые каждой отдельной частью даты должны восприниматься как обрабатываемые по притнципу И)
// !! здесь ОТЛИЧИЕ от поведения оригинального Cron, который обрабатывает день недели и день месяца по ИЛИ !!
// при формировании крон-записи допускается последовательно опускать старшие незначащие элементы (будет воспринято как указание звездочки)
// указание минут обязательно
Функция ПреобразоватьЭлементЗаписиКронВСтруктуру(стрЭлементЗаписи, чМинГод=Неопределено, чМаксГод=Неопределено)

    симвПробелы = " " + Символы.Таб + Символы.ВК + Символы.ПС;
    симвЛюбой   = "*";

    Значение = СокрЛП(стрЭлементЗаписи);

    мЧастиДаты = СтрРазделить(Значение, симвПробелы, ЛОЖЬ);

    струДата = Новый Структура;

    КолЧастей = мЧастиДаты.Количество();

    струДата.Вставить(
                "Минута"
                ,ПреобразоватьПолеКронВМассивЗначений(
                        ?(
                            КолЧастей > 0
                            ,мЧастиДаты[0]
                            ,"" //минуты как минимум обязаны быт указаны
                            )
                        ,0
                        ,59
                    )
            );

    струДата.Вставить(
                "Час"
                ,ПреобразоватьПолеКронВМассивЗначений(
                        ?(
                            КолЧастей > 1
                            ,мЧастиДаты[1]
                            ,симвЛюбой
                            )
                        ,0
                        ,23
                    )
            );
    
    струДата.Вставить(
                "ДеньМесяца"
                ,ПреобразоватьПолеКронВМассивЗначений(
                        ?(
                            КолЧастей > 2
                            ,мЧастиДаты[2]
                            ,симвЛюбой
                            )
                        ,1
                        ,31
                    )
            );

    струДата.Вставить(
                "Месяц"
                ,ПреобразоватьПолеКронВМассивЗначений(
                        ?(
                            КолЧастей > 3
                            ,мЧастиДаты[3]
                            ,симвЛюбой
                            )
                        ,1
                        ,12
                    )
            );

    струДата.Вставить(
                "ДеньНедели"
                ,ПреобразоватьПолеКронВМассивЗначений(
                        ?(
                            КолЧастей > 4
                            ,мЧастиДаты[4]
                            ,симвЛюбой
                            )
                        ,1
                        ,7
                    )
            );

    струДата.Вставить(
                "Год"
                ,ПреобразоватьПолеКронВМассивЗначений(
                        ?(
                            КолЧастей > 5
                            ,мЧастиДаты[5]
                            ,симвЛюбой
                            )
                        ,?(
                            чМинГод = Неопределено
                            ,Год(ТекущаяДата())
                            ,чМинГод
                            )
                        ,?(
                            чМаксГод = Неопределено
                            ,Год(ТекущаяДата())
                            ,чМаксГод
                            )
                    )
            );

    Возврат(струДата);
    
КонецФункции

// крон-поле - составняа часть крон-записи(поле,поле,...,поле), соответствующая отдельной части даты
// преобразуется в массив всех допустимых значений (число), 
// соответствующих минимальному и максимальному значениям для данной части даты
Функция ПреобразоватьПолеКронВМассивЗначений(стрПоле, чМин, чМакс)
    мЭлементовПоля = СтрРазделить(стрПоле, ",", ЛОЖЬ);
    мЗначений = Новый Массив;
    Для Каждого тЭлементПоля Из мЭлементовПоля Цикл
        Для Каждого тЗнч Из ПреобразоватьЭлементПоляКронВМассивЗначений(тЭлементПоля, чМин, чМакс) Цикл
            Если мЗначений.Найти(тЗнч) = Неопределено Тогда
                мЗначений.Добавить(тЗнч);
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;
    
    спс = Новый СписокЗначений;
    спс.ЗагрузитьЗначения(мЗначений);
    спс.СортироватьПоЗначению(НаправлениеСортировки.Возр);
    
    Возврат(спс.ВыгрузитьЗначения());
КонецФункции

// отдельный элемент крон-поля ({*|N|N-N}[/N]) может состоять из значения-или-интервала с опциональным указанием повторителя;
// повторитель - имеет смысл только для интервала, указывает шаг, с которым увеличиваются значения внутри интервала
// начиная с начального и не превышая конечное значения интервала.
// в случае указания конкретного значения вместо интервала - повторитель игнорируется
// значения в виде звездочки "*" интерпретируется как интервал, начало и конец которого
// соответствуют минимальному и максимальному разрешенным значениям
// отдельные значения и интервалы (с учетом повторителя) объединяются в единый массив по принципу ИЛИ
Функция ПреобразоватьЭлементПоляКронВМассивЗначений(стрЭлементПоля, чМин, чМакс)
    Попытка
        симвПовторитель = "/";
        симвИнтервал    = "-";
        симвЛюбой       = "*";
        
        Значение = СокрЛП(стрЭлементПоля);
        
        ПозПовторитель = СтрНайти(Значение, симвПовторитель);
        
        Если ПозПовторитель > 0 Тогда
            Повторитель = Число(СокрЛП(Сред(Значение, ПозПовторитель+1)));
            Значение = СокрЛП(Лев(Значение, ПозПовторитель-1));
        Иначе
            Повторитель = 1;
        КонецЕсли;
        
        ПозИнтервал = СтрНайти(Значение, симвИнтервал);
        Если ПозИнтервал = 0 Тогда
            Если Значение = симвЛюбой Тогда
                НачалоИнтервала = чМин;
                КонецИнтервала  = чМакс;
            Иначе
                НачалоИнтервала = Число(Значение);
                КонецИнтервала  = НачалоИнтервала;
            КонецЕсли;
        Иначе
            НачалоИнтервала = Число(СокрЛП(Лев (Значение, ПозИнтервал-1)));
            КонецИнтервала  = Число(СокрЛП(Сред(Значение, ПозИнтервал+1)));
        КонецЕсли;
        
        НачалоИнтервала = Макс(чМин,  НачалоИнтервала);
        КонецИнтервала  = Мин (чМакс, КонецИнтервала);
        
        мЗначения = Новый Массив;
        Сч = НачалоИнтервала;
        Пока Сч <= КонецИнтервала Цикл
            мЗначения.Добавить(Сч);
            Сч = Сч + Повторитель;
        КонецЦикла;
        
        Возврат(мЗначения);
    Исключение
        ВызватьИсключение("Ошибка преобразования крон-значения {" + стрЭлементПоля + ";" + чМин + "-" + чМакс + "}: " + ОписаниеОшибки());
    КонецПопытки;
КонецФункции

тст = ПолучитьДетальноеРасписаниеДляЗаписиКрон(
    //мин   час         деньМесяца      Месяц   деньНедели  Год
    "*/30   0-7,18-23   */1             */1     1-5
    |;*/30  */1         */1             */1     6,7" 
        ,Дата(2023,1,1)
        ,ТекущаяДата()
        ,Неопределено
    );

ничего = Неопределено;
